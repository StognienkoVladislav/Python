
"""

    __len__(self)
    Возвращает количество элементов в контейнере. Часть протоколов для изменяемого и неизменяемого контейнеров.

    __getitem__(self, key)
    Определяет поведение при доступе к элементу, используя синтаксис self[key].
    Тоже относится и к протоколу изменяемых и к протоколу неизменяемых контейнеров.
    Должен выбрасывать соответствующие исключения: TypeError если неправильный тип ключа и KeyError
    если ключу не соответствует никакого значения.

    __setitem__(self, key, value)
    Определяет поведение при присваивании значения элементу, используя синтаксис self[nkey] = value.
    Часть протокола изменяемого контейнера. Опять же, вы должны выбрасывать KeyError и TypeError в соответсвующих случаях.

    __delitem__(self, key)
    Определяет поведение при удалении элемента (то есть del self[key]). Это часть только протокола
    для изменяемого контейнера. Вы должны выбрасывать соответствующее исключение, если ключ некорректен.

    __iter__(self)
    Должен вернуть итератор для контейнера. Итераторы возвращаются в множестве ситуаций,
    главным образом для встроенной функции iter() и в случае перебора элементов контейнера выражением for x in container:
    Итераторы сами по себе объекты и они тоже должны определять метод __iter__, который возвращает self.

    __reversed__(self)
    Вызывается чтобы определить поведения для встроенной функции reversed().
    Должен вернуть обратную версию последовательности.
    Реализуйте метод только если класс упорядоченный, как список или кортеж.

    __contains__(self, item)
    __contains__ предназначен для проверки принадлежности элемента с помощью in и not in.
    Вы спросите, почему же это не часть протокола последовательности?
    Потому что когда __contains__ не определён, Питон просто перебирает всю последовательность элемент за элементом
    и возвращает True если находит нужный.

    __missing__(self, key)
    __missing__ используется при наследовании от dict.
    Определяет поведение для для каждого случая, когда пытаются получить элемент по несуществующему ключу
    (так, например, если у меня есть словарь d и я пишу d["george"] когда "george" не является ключом в словаре,
    вызывается d.__missing__("george")).

"""